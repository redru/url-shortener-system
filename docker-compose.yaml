services:
  url-shortener:
    build:
      context: .
      dockerfile: url-shortener/Dockerfile
    ports:
      - "8000:8080"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=url_shortener
      - POSTGRES_USER=url_shortener
      - POSTGRES_PASSWORD=url_shortener
      - GENERATOR_URLS=http://generator1:8080,http://generator2:8080,http://generator3:8080
    depends_on:
      postgres:
        condition: service_healthy
      generator1:
        condition: service_started
      generator2:
        condition: service_started
      generator3:
        condition: service_started

  generator1:
    build:
      context: .
      dockerfile: distributed-id-generator/Dockerfile
    environment:
      - MACHINE_ID=0
      - DATACENTER_ID=1
    ports:
      - "8080:8080"

  generator2:
    build:
      context: .
      dockerfile: distributed-id-generator/Dockerfile
    environment:
      - MACHINE_ID=1
      - DATACENTER_ID=1
    ports:
      - "8081:8080"

  generator3:
    build:
      context: .
      dockerfile: distributed-id-generator/Dockerfile
    environment:
      - MACHINE_ID=2
      - DATACENTER_ID=2
    ports:
      - "8082:8080"

  postgres:
    image: postgres:17
    environment:
      - POSTGRES_DB=url_shortener
      - POSTGRES_USER=url_shortener
      - POSTGRES_PASSWORD=url_shortener
    ports:
      - "5433:5432"
    volumes:
      - url_shortener_postgres_data:/var/lib/postgresql/data
      - ./url-shortener/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U url_shortener -d url_shortener" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  url_shortener_postgres_data:
